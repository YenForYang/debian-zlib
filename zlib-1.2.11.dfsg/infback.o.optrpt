Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.0.1.144 Build 20181018

Compiler options: -O3 -diag-disable=10013,10385,10237,10346 -fabi-version=13 -falign-functions -falign-loops -fbuiltin -fdata-sections -ffunction-sections -ffat-lto-objects -fpermissive -gcc-name=gcc.intel -gnu-prefix=x86_64-linux-gnu- -gxx-name=g++.intel -inline-level=2 -inline-min-caller-growth=0 -ipo -march=native -no-inline-max-per-compile -no-inline-max-per-routine -no-inline-max-size -no-inline-max-total-size -par-schedule-auto -parallel -qopt-matmul -qopt-mem-layout-trans -qopt-multi-version-aggressive -qopt-prefetch -qoverride-limits -static-intel -qopt-report=5 -qno-opt-report-embed -g -Wformat -Wformat-security -Wall -O3 -qopt-report-file=infback.o.optrpt -D_FORTIFY_SOURCE=2 -D_REENTRANT -DUNALIGNED_OK -D_LARGEFILE64_SOURCE=1 -c -o infback.o -Wl,--as-needed,--relax,--gc-sections,-O,2 -pipe

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: disabled (user-specified)
  -inline-max-total-size: disabled (user-specified)
  -inline-max-per-routine: disabled (user-specified)
  -inline-max-per-compile: disabled (user-specified)

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: memcpy(void *__restrict__, const void *__restrict__, size_t)

    Report from: Interprocedural optimizations [ipo]

NEVER EMIT DEFINITION FUNCTION: (memcpy(void *__restrict__, const void *__restrict__, size_t))/usr/include/x86_64-linux-gnu/bits/string_fortified.h(33,1)

===========================================================================

Begin optimization report for: fixedtables()

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (fixedtables()) infback.c(84,1)

===========================================================================

Begin optimization report for: inflateBack()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (inflateBack()) [3/5=60.0%] infback.c(256,1)
  -> INDIRECT-: (299,13)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INLINE: (309,17) fixedtables() (isz = 10) (sz = 15)
  -> INDIRECT-: (329,13)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (343,17)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (344,17)  out_627_V$53.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INLINE (MANUAL): (347,17) memcpy(void *__restrict__, const void *__restrict__, size_t) (isz = 6) (sz = 17)
    -> EXTERN: /usr/include/x86_64-linux-gnu/bits/string_fortified.h:(34,10) __builtin___memcpy_chk(void *, const void *, unsigned long, unsigned long)
    -> EXTERN: /usr/include/x86_64-linux-gnu/bits/string_fortified.h:(34,56) __builtin_object_size(const void *, int)
  -> INDIRECT-: (360,13)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (379,17)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (388,19) inflate_table(codetype, unsigned short *, unsigned int, code **, unsigned int *, unsigned short *)
  -> INDIRECT-: (403,21)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (411,25)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (423,25)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (430,25)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> EXTERN: (462,19) inflate_table(codetype, unsigned short *, unsigned int, code **, unsigned int *, unsigned short *)
  -> EXTERN: (471,19) inflate_table(codetype, unsigned short *, unsigned int, code **, unsigned int *, unsigned short *)
  -> EXTERN: (487,17) inflate_fast(z_streamp, unsigned int)
  -> INDIRECT-: (496,17)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (504,21)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (516,17)  out_627_V$53.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (540,17)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (550,17)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (558,21)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (573,17)  in_627_V$51.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (587,17)  out_627_V$53.0.4
     [[ Callee not marked with inlining pragma  <1>]]
  -> INDIRECT-: (610,21)  out_627_V$53.0.4
     [[ Callee not marked with inlining pragma  <1>]]


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at infback.c(502,30)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at infback.c(540,17)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable bits was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at infback.c(556,30)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at infback.c(573,17)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15523: loop was not vectorized: loop control variable bits was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at infback.c(577,13)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at infback.c(599,17)
      remark #25401: memcopy(with guard) generated
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #17106: parallel dependence: assumed ANTI dependence between *from (599:17) and *put (601:22)
      remark #17106: parallel dependence: assumed FLOW dependence between *put (601:22) and *from (599:17)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at infback.c(599,17)
      <Multiversioned v2>
         remark #17104: loop was not parallelized: existence of parallel dependence
         remark #17106: parallel dependence: assumed FLOW dependence between *put (601:22) and *from (601:22)
         remark #17106: parallel dependence: assumed ANTI dependence between *from (601:22) and *put (601:22)
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2  
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END

      LOOP BEGIN at infback.c(599,17)
      <Remainder, Multiversioned v2>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at infback.c(360,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at infback.c(378,13)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at infback.c(379,17)
      remark #17104: loop was not parallelized: existence of parallel dependence
      remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
   LOOP END
LOOP END

LOOP BEGIN at infback.c(383,13)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ infback.c(384,35) ]
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #17106: parallel dependence: assumed OUTPUT dependence between strm->state->lens[order[state->have]] (384:17) and strm->state->lens[order[state->have]] (384:17)
   remark #17106: parallel dependence: assumed OUTPUT dependence between strm->state->lens[order[state->have]] (384:17) and strm->state->lens[order[state->have]] (384:17)
   remark #15389: vectorization support: reference order[state->have] has unaligned access   [ infback.c(384,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <strm->state->lens[order[state->have]]>, part of index is read from memory   [ infback.c(384,17) ]
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 0.115
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 13.000 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
   remark #25015: Estimate of max trip count of loop=19
LOOP END

LOOP BEGIN at infback.c(383,13)
<Remainder>
   remark #25015: Estimate of max trip count of loop=19
LOOP END

LOOP BEGIN at infback.c(399,13)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at infback.c(411,25)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable bits was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at infback.c(423,25)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable bits was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at infback.c(430,25)
      remark #17102: loop was not parallelized: not a parallelization candidate
      remark #15523: loop was not vectorized: loop control variable bits was found, but loop iteration count cannot be computed before executing the loop
   LOOP END

   LOOP BEGIN at infback.c(441,21)
   <Peeled loop for vectorization>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at infback.c(441,21)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ infback.c(442,37) ]
      remark #17108: loop was not parallelized: insufficient computational work
      remark #15388: vectorization support: reference strm->state->lens[state->have] has aligned access   [ infback.c(442,25) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 4.500
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.500 
      remark #15478: estimated potential speedup: 4.840 
      remark #15488: --- end vector cost summary ---
      remark #25015: Estimate of max trip count of loop=40
   LOOP END

   LOOP BEGIN at infback.c(441,21)
   <Remainder loop for vectorization>
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25015: Estimate of max trip count of loop=320
   LOOP END
LOOP END

LOOP BEGIN at infback.c(329,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END

LOOP BEGIN at infback.c(341,13)
   remark #17102: loop was not parallelized: not a parallelization candidate
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at infback.c(299,13)
   remark #17104: loop was not parallelized: existence of parallel dependence
   remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria
LOOP END


Non-optimizable loops:


LOOP BEGIN at infback.c(488,17)
   remark #15535: loop was not vectorized: loop contains switch statement. Consider using if-else statement.   [ infback.c(291,9) ]
   remark #17102: loop was not parallelized: not a parallelization candidate

   LOOP BEGIN at infback.c(496,17)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      remark #17102: loop was not parallelized: not a parallelization candidate
   LOOP END

   LOOP BEGIN at infback.c(550,17)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
      remark #17102: loop was not parallelized: not a parallelization candidate
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

infback.c(494,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
infback.c(401,28):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
/usr/include/x86_64-linux-gnu/bits/string_fortified.h(34,10):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
/usr/include/x86_64-linux-gnu/bits/string_fortified.h(34,10):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
/usr/include/x86_64-linux-gnu/bits/string_fortified.h(34,10):remark #34026: call to memcpy implemented as a call to optimized library version
infback.c(499,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
infback.c(501,28):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
infback.c(548,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
infback.c(599,17):remark #34014: optimization advice for memcpy: increase the destination's alignment to 16 (and use __assume_aligned) to speed up library implementation
infback.c(599,17):remark #34014: optimization advice for memcpy: increase the source's alignment to 16 (and use __assume_aligned) to speed up library implementation
infback.c(599,17):remark #34026: call to memcpy implemented as a call to optimized library version
infback.c(553,24):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
infback.c(555,28):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (16, 0)
infback.c(256,1):remark #34051: REGISTER ALLOCATION : [inflateBack] infback.c:256

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     471
            Global    :     136
            Local     :     335
        Regenerable   :      41
        Spilled       :      26
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :      49 [4.47e+00 ~ 2.0%]
            Writes    :      39 [7.63e+00 ~ 3.4%]
        Spills        :     176 bytes*
            Reads     :     175 [7.47e+00 ~ 3.3%]
            Writes    :      78 [1.48e+01 ~ 6.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: inflateBackEnd()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (inflateBackEnd()) [4/5=80.0%] infback.c(633,1)
  -> INDIRECT-: (636,5)  strm_954_V$7c.0.5->zfree_V$12
     [[ Unable to inline indirect callsite  <2>]]


    Report from: Code generation optimizations [cg]

infback.c(633,1):remark #34051: REGISTER ALLOCATION : [inflateBackEnd] infback.c:633

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rbp rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       9
            Local     :       6
        Regenerable   :       2
        Spilled       :       1
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: inflateBackInit_()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (inflateBackInit_()) [5/5=100.0%] infback.c(34,1)
  -> INDIRECT-: (58,41)  strm_615_V$3.0.2->zalloc_V$11
     [[ Unable to inline indirect callsite  <2>]]


    Report from: Code generation optimizations [cg]

infback.c(34,1):remark #34051: REGISTER ALLOCATION : [inflateBackInit_] infback.c:34

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rcx rbp rsi rdi r8 r12-r13]
        
    Routine temporaries
        Total         :      31
            Global    :      16
            Local     :      15
        Regenerable   :       6
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The compiler's heuristics indicate that the function is not profitable to 
    inline.  Override this decision by adding "inline 
    __attribute__((always_inline))" to the declaration of the called function, 
    or add "#pragma forceinline" before the call site.

<2> The indirectly called function must be resolved to its targets before it 
can be inlined.  Consider compiling with -ipo or -prof-gen followed by 
-prof-use.

